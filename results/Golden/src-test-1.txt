public class IsoCamTest extends GdxTest { private static final int TARGET_WIDTH = 480 ; private static final float UNIT_TO_PIXEL = ( IsoCamTest . TARGET_WIDTH ) * 0.15F ; Texture texture ; OrthographicCamera cam ; SpriteBatch batch ; final Sprite [ ] [ ] sprites = new Sprite [ 10 ] [ 10 ] ; final Matrix4 matrix = new Matrix4 ( ) ; @ Override public void create ( ) { texture = new Texture ( files . internal ( "data/badlogicsmall.jpg" ) ) ; float unitsOnX = ( ( ( float ) ( Math . sqrt ( 2 ) ) ) * ( IsoCamTest . TARGET_WIDTH ) ) / ( IsoCamTest . UNIT_TO_PIXEL ) ; float pixelsOnX = ( graphics . getWidth ( ) ) / unitsOnX ; float unitsOnY = ( graphics . getHeight ( ) ) / pixelsOnX ; cam = new OrthographicCamera ( unitsOnX , unitsOnY , 25 ) ; <START_BUG> cam . position . mul ( 30 ) ; <END_BUG> cam . near = 1 ; cam . far = 1000 ; matrix . setToRotation ( new Vector3 ( 1 , 0 , 0 ) , 90 ) ; for ( int z = 0 ; z < 10 ; z ++ ) { for ( int x = 0 ; x < 10 ; x ++ ) { sprites [ x ] [ z ] = new Sprite ( texture ) ; sprites [ x ] [ z ] . setPosition ( x , z ) ; sprites [ x ] [ z ] . setSize ( 1 , 1 ) ; } } batch = new SpriteBatch ( ) ; input . setInputProcessor ( new IsoCamTest . IsoCamController ( cam ) ) ; } @ Override public void dispose ( ) { } @ Override public void render ( ) { } final Plane xzPlane = new Plane ( new Vector3 ( 0 , 1 , 0 ) , 0 ) ; final Vector3 intersection = new Vector3 ( ) ; Sprite lastSelectedTile = null ; private void checkTileTouched ( ) { } public class IsoCamController extends InputAdapter { final Plane xzPlane = new Plane ( new Vector3 ( 0 , 1 , 0 ) , 0 ) ; final Vector3 intersection = new Vector3 ( ) ; final Vector3 curr = new Vector3 ( ) ; final Vector3 last = new Vector3 ( ( - 1 ) , ( - 1 ) , ( - 1 ) ) ; final Vector3 delta = new Vector3 ( ) ; final Camera camera ; public IsoCamController ( Camera camera ) { } @ Override public boolean touchDragged ( int x , int y , int pointer ) { } @ Override public boolean touchUp ( int x , int y , int pointer , int button ) { } } @ Override public boolean needsGL20 ( ) { } }
