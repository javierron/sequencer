public static List < MutableIssue > jiraIssues = new ArrayList < MutableIssue > ( ) ;
assertEquals ( 1 , filterSettings . getSelectedStatus ( ) . size ( ) ) ;
Map < String , List > preprocess ( List < String > stringsToBePreprocessed , List labels ) throws Exception ;
private HttpServletRequest request ;
public class WachtwoordResetToken {
int startingIndex = getStartingIndex ( config ) ;
final Optional < RunStatus > lastRunStatus = ListUtils . emptyIfNull ( run . getRunStatuses ( ) ) . stream ( )
List < PipelineRun > running = pipelineRunDao . loadPipelineRunsByStatus ( TaskStatus . RUNNING ) ;
int startingIndex = getStartingIndex ( config ) ;
import sparksoniq . jsoniq . ExecutionMode ;
import sparksoniq . jsoniq . ExecutionMode ;
this . _children . addAll ( children ) ;
metadata
import sparksoniq . jsoniq . ExecutionMode ;
import sparksoniq . jsoniq . ExecutionMode ;
sum += ( int ) realitemCost [ i ] . getUB ( ) ;
void deleteAllByItemId ( Iterable < Long > ids ) ;
import org . eclipse . emfcloud . modelserver . client . ModelServerClient ;
import static org . eclipse . glsp . api . utils . ServerStatusUtil . getDetails ;
import org . eclipse . glsp . graph . GPoint ;
"Define if the datasource time string uses a 'Z' instead of '+00:00'." ;
public < T > Function < Throwable , Observable < T > > onError (
for ( int j = 0 ; j < 8 ; j ++ ) {
String typescriptEncryptedKey = "3A1B688733D1974BBA96BEEF4FB03E7A5379C343B057701B77E9E063C887A6936BF63900524E4E05F006FFF0D078D1DE" ;
Utils . showError ( "Network failure" ) ;
Utils . showError ( "Network failure" ) ;
int index = ( page - 1 ) * NUM_COLS * NUM_ROWS + i * NUM_COLS + j ;
Utils . showError ( "Network failure" ) ;
super ( jsonHelper , TransactionType . HASH_LOCK , HashLockTransactionDTO . class ) ;
super ( jsonHelper , TransactionType . NAMESPACE_METADATA ,
if ( transaction . getType ( ) == TransactionType . HASH_LOCK ) {
super ( TransactionType . MOSAIC_METADATA , networkType , targetAccount ,
super ( jsonHelper , TransactionType . NAMESPACE_REGISTRATION ,
return TransactionType . HASH_LOCK ;
Validate . isTrue ( signedHashLockTransaction . getType ( ) == TransactionType . HASH_LOCK ,
super ( TransactionType . NAMESPACE_REGISTRATION , networkType ) ;
super ( jsonHelper , TransactionType . NAMESPACE_METADATA ,
return TransactionType . ACCOUNT_METADATA ;
super ( TransactionType . NAMESPACE_METADATA , networkType , targetAccount ,
Assertions . assertEquals ( TransactionType . MOSAIC_METADATA ,
super ( jsonHelper , TransactionType . MULTISIG_ACCOUNT_MODIFICATION ,
return TransactionType . MOSAIC_METADATA ;
super ( jsonHelper , TransactionType . MOSAIC_METADATA ,
return TransactionType . NAMESPACE_METADATA ;
Assertions . assertEquals ( TransactionType . MOSAIC_METADATA ,
super ( jsonHelper , TransactionType . MULTISIG_ACCOUNT_MODIFICATION ,
super ( TransactionType . MULTISIG_ACCOUNT_MODIFICATION , networkType ) ;
return TransactionType . NAMESPACE_REGISTRATION ;
return TransactionType . MULTISIG_ACCOUNT_MODIFICATION ;
super ( jsonHelper , TransactionType . HASH_LOCK , HashLockTransactionDTO . class ) ;
super ( jsonHelper , TransactionType . NAMESPACE_REGISTRATION ,
super ( jsonHelper , TransactionType . MOSAIC_METADATA ,
super ( TransactionType . ACCOUNT_METADATA , networkType , targetAccount ,
super ( TransactionType . HASH_LOCK , networkType ) ;
if ( transaction . getType ( ) == TransactionType . MOSAIC_METADATA ) {
super ( jsonHelper , TransactionType . ACCOUNT_METADATA ,
public < T > Function < Throwable , Observable < T > > onError (
String typescriptEncryptedKey = "3A1B688733D1974BBA96BEEF4FB03E7A5379C343B057701B77E9E063C887A6936BF63900524E4E05F006FFF0D078D1DE" ;
super ( jsonHelper , TransactionType . HASH_LOCK , HashLockTransactionDTO . class ) ;
super ( jsonHelper , TransactionType . NAMESPACE_METADATA ,
if ( transaction . getType ( ) == TransactionType . HASH_LOCK ) {
super ( TransactionType . MOSAIC_METADATA , networkType , targetAccount ,
super ( jsonHelper , TransactionType . NAMESPACE_REGISTRATION ,
return TransactionType . HASH_LOCK ;
Validate . isTrue ( signedHashLockTransaction . getType ( ) == TransactionType . HASH_LOCK ,
super ( TransactionType . NAMESPACE_REGISTRATION , networkType ) ;
super ( jsonHelper , TransactionType . NAMESPACE_METADATA ,
return TransactionType . ACCOUNT_METADATA ;
super ( jsonHelper , TransactionType . ACCOUNT_METADATA ,
super ( TransactionType . NAMESPACE_METADATA , networkType , targetAccount ,
Assertions . assertEquals ( TransactionType . MOSAIC_METADATA ,
super ( jsonHelper , TransactionType . MULTISIG_ACCOUNT_MODIFICATION ,
return TransactionType . MOSAIC_METADATA ;
super ( jsonHelper , TransactionType . MOSAIC_METADATA ,
return TransactionType . NAMESPACE_METADATA ;
Assertions . assertEquals ( TransactionType . MOSAIC_METADATA ,
super ( TransactionType . MULTISIG_ACCOUNT_MODIFICATION , networkType ) ;
return TransactionType . NAMESPACE_REGISTRATION ;
return TransactionType . MULTISIG_ACCOUNT_MODIFICATION ;
super ( jsonHelper , TransactionType . HASH_LOCK , HashLockTransactionDTO . class ) ;
super ( jsonHelper , TransactionType . NAMESPACE_REGISTRATION ,
super ( jsonHelper , TransactionType . MOSAIC_METADATA ,
super ( TransactionType . ACCOUNT_METADATA , networkType , targetAccount ,
super ( TransactionType . HASH_LOCK , networkType ) ;
if ( transaction . getType ( ) == TransactionType . MOSAIC_METADATA ) {
super ( jsonHelper , TransactionType . ACCOUNT_METADATA ,
super ( content , name , argNamesWithDefaults , caller , localContextScope , - 1 , - 1 ) ;
interpreter . addAllChildErrors ( templateFile , child . getErrorsCopy ( ) ) ;
false , interpreter . getContext ( ) , interpreter . getLineNumber ( ) , interpreter . getPosition ( ) ) ;
String urlBase = options . getUrlBase ( ) ;
String urlBase = options . getUrlBase ( ) ;
String urlBase = options . getUrlBase ( ) ;
String urlBase = options . getUrlBase ( ) ;
String urlBase = options . getUrlBase ( ) ;
String urlBase = options . getUrlBase ( ) ;
protected Response post ( Object body , String url ) {
import io . restassured . response . Response ;
import io . restassured . response . Response ;
static class BinEncoder extends UInt4s . BinEncoder {
static class BinDecoder extends UInt4s . BinDecoder {
static class TxtDecoder extends UInt4s . TxtDecoder {
static class TxtEncoder extends UInt4s . TxtEncoder {
public void testSort_Immutable ( ) {
List < Student > result = school . collect ( students , s -> s . getScope ( ) >= 50 && s . getScope ( ) < 70 ) ;
List < Student > result = school . collect ( students , s -> s . getScope ( ) > 0 && s . getScope ( ) < 50 ) ;
List < Student > result = school . collect ( students , s -> s . getScope ( ) >= 70 && s . getScope ( ) <= 100 ) ;
super ( jsonHelper , TransactionType . HASH_LOCK , HashLockTransactionDTO . class ) ;
super ( jsonHelper , TransactionType . NAMESPACE_METADATA ,
if ( transaction . getType ( ) == TransactionType . HASH_LOCK ) {
super ( TransactionType . MOSAIC_METADATA , networkType , targetAccount ,
super ( jsonHelper , TransactionType . NAMESPACE_REGISTRATION ,
return TransactionType . HASH_LOCK ;
Validate . isTrue ( signedHashLockTransaction . getType ( ) == TransactionType . HASH_LOCK ,
super ( TransactionType . NAMESPACE_REGISTRATION , networkType ) ;
return TransactionType . ACCOUNT_METADATA ;
super ( jsonHelper , TransactionType . ACCOUNT_METADATA ,
super ( TransactionType . NAMESPACE_METADATA , networkType , targetAccount ,
Assertions . assertEquals ( TransactionType . MOSAIC_METADATA ,
super ( jsonHelper , TransactionType . MULTISIG_ACCOUNT_MODIFICATION ,
return TransactionType . MOSAIC_METADATA ;
super ( jsonHelper , TransactionType . MOSAIC_METADATA ,
return TransactionType . NAMESPACE_METADATA ;
Assertions . assertEquals ( TransactionType . MOSAIC_METADATA ,
super ( jsonHelper , TransactionType . MULTISIG_ACCOUNT_MODIFICATION ,
super ( TransactionType . MULTISIG_ACCOUNT_MODIFICATION , networkType ) ;
return TransactionType . NAMESPACE_REGISTRATION ;
return TransactionType . MULTISIG_ACCOUNT_MODIFICATION ;
super ( jsonHelper , TransactionType . HASH_LOCK , HashLockTransactionDTO . class ) ;
super ( jsonHelper , TransactionType . NAMESPACE_REGISTRATION ,
super ( jsonHelper , TransactionType . MOSAIC_METADATA ,
super ( TransactionType . ACCOUNT_METADATA , networkType , targetAccount ,
super ( TransactionType . HASH_LOCK , networkType ) ;
if ( transaction . getType ( ) == TransactionType . MOSAIC_METADATA ) {
public Transformer2WResult (
public Transformer2WResult (
Map < String , String > fieldsToAttributes = simpleEntityData . getFieldsToValues ( ) ;
public Map < String , String > getFieldsToValues ( ) {
public abstract class EntityData {
private Integer dataproviderId ;
if ( ! variableMetadataUtil . compareVariableMetadata ( fmdo , fmdn ) || ! compareVarGroup ( fmdo , fmdn ) ) {
